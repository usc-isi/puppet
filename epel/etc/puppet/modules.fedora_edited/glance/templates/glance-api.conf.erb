[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = <%= log_verbose %>

# Show debugging output in logs (sets DEBUG log level output)
debug = <%= log_debug %>

# Which backend store should Glance use by default is not specified
# in a request to add a new image to Glance? Default: 'file'
# Available choices are 'file', 'swift', and 's3'
default_store = <%= default_store %>

# List of which store classes and store class locations are
# currently known to glance at startup.
known_stores = glance.store.filesystem.Store,
               glance.store.http.Store,
               glance.store.rbd.Store,
               glance.store.s3.Store,
               glance.store.swift.Store,

# Address to bind the API server
bind_host = <%= bind_host %>

# Port the bind the API server to
bind_port = <%= bind_port %>

# Log to this file. Make sure you do not set the same log
# file for both the API and registry servers!
log_file = <%= log_file %>

# Backlog requests when creating socket
backlog = <%= backlog %>

# TCP_KEEPIDLE value in seconds when creating socket.
# Not supported on OS X.
tcp_keepidle = <%= tcp_keepidle %>

# SQLAlchemy connection string for the reference implementation
# registry server. Any valid SQLAlchemy connection string is fine.
# See: http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html#sqlalchemy.create_engine
sql_connection = <%= sql_connection %>

# Period in seconds after which SQLAlchemy should reestablish its connection
# to the database.
#
# MySQL uses a default `wait_timeout` of 8 hours, after which it will drop
# idle connections. This can result in 'MySQL Gone Away' exceptions. If you
# notice this, you can lower this value to ensure that SQLAlchemy reconnects
# before MySQL can drop the connection.
sql_idle_timeout = <%= sql_idle_timeout %>

# Number of Glance API worker processes to start.
# On machines with more than one CPU increasing this value
# may improve performance (especially if using SSL with
# compression turned on). It is typically recommended to set
# this value to the number of CPUs present on your machine.
workers = <%= workers %>

# Role used to identify an authenticated user as administrator
admin_role = <%= admin_role %>

# Allow unauthenticated users to access the API with read-only
# privileges. This only applies when using ContextMiddleware.
allow_anonymous_access = <%= allow_anonymous_access %>

# ================= Syslog Options ============================

# Send logs to syslog (/dev/log) instead of to file specified
# by `log_file`
use_syslog = <%= use_syslog %>

# Facility to use. If unset defaults to LOG_USER.
syslog_log_facility = <%= syslog_log_facility %>

# ================= SSL Options ===============================

# Certificate file to use when starting API server securely
cert_file = <%= cert_file %>

# Private key file to use when starting API server securely
key_file = <%= key_file %>

# ================= Security Options ==========================

# AES key for encrypting store 'location' metadata, including
# -- if used -- Swift or S3 credentials
# Should be set to a random string of length 16, 24 or 32 bytes
metadata_encryption_key = <%= metadata_encryption_key %>

# ============ Registry Options ===============================

# Address to find the registry server
registry_host = <%= registry_host %>

# Port the registry server is listening on
registry_port = <%= registry_port %>

# What protocol to use when connecting to the registry server?
# Set to https for secure HTTP communication
registry_client_protocol = <%= registry_client_protocol %>

# The path to the key file to use in SSL connections to the
# registry server, if any. Alternately, you may set the
# GLANCE_CLIENT_KEY_FILE environ variable to a filepath of the key file
registry_client_key_file = <%= registry_client_key_file %>

# The path to the cert file to use in SSL connections to the
# registry server, if any. Alternately, you may set the
# GLANCE_CLIENT_CERT_FILE environ variable to a filepath of the cert file
registry_client_cert_file = <%= registry_client_cert_file %>

# The path to the certifying authority cert file to use in SSL connections
# to the registry server, if any. Alternately, you may set the
# GLANCE_CLIENT_CA_FILE environ variable to a filepath of the CA cert file
registry_client_ca_file = <%= registry_client_ca_file %>

# ============ Notification System Options =====================

# Notifications can be sent when images are create, updated or deleted.
# There are three methods of sending notifications, logging (via the
# log_file directive), rabbit (via a rabbitmq queue), qpid (via a Qpid
# message queue), or noop (no notifications sent, the default)
notifier_strategy = <%= notifier_strategy %>

# Configuration options if sending notifications via rabbitmq (these are
# the defaults)
rabbit_host = <%= rabbit_host %>
rabbit_port = <%= rabbit_port %>
rabbit_use_ssl = <%= rabbit_use_ssl %>
rabbit_userid = <%= rabbit_userid %>
rabbit_password = <%= rabbit_password %>
rabbit_virtual_host = <%= rabbit_virtual_host %>
rabbit_notification_exchange = <%= rabbit_notification_exchange %>
rabbit_notification_topic = <%= rabbit_notification_topic %>

# Configuration options if sending notifications via Qpid (these are
# the defaults)
qpid_notification_exchange = <%= qpid_notification_exchange %>
qpid_notification_topic = <%= qpid_notification_topic %>
qpid_host = <%= qpid_host %>
qpid_port = <%= qpid_port %>
qpid_username = <%= qpid_username %>
qpid_password = <%= qpid_password %>
qpid_sasl_mechanisms = <%= qpid_sasl_mechanisms %>
qpid_reconnect_timeout = <%= qpid_reconnect_timeout %>
qpid_reconnect_limit = <%= qpid_reconnect_limit %>
qpid_reconnect_interval_min = <%= qpid_reconnect_interval_min %>
qpid_reconnect_interval_max = <%= qpid_reconnect_interval_max %>
qpid_reconnect_interval = <%= qpid_reconnect_interval %>
qpid_heartbeat = <%= qpid_heartbeat %>
# Set to 'ssl' to enable SSL
qpid_protocol = <%= qpid_protocol %>
qpid_tcp_nodelay = <%= qpid_tcp_nodelay %>

# ============ Filesystem Store Options ========================

# Directory that the Filesystem backend store
# writes image data to
filesystem_store_datadir = <%= filesystem_store_datadir %>

# ============ Swift Store Options =============================

# Version of the authentication service to use
# Valid versions are '2' for keystone and '1' for swauth and rackspace
swift_store_auth_version = <%= swift_store_auth_version %>

# Address where the Swift authentication service lives
# Valid schemes are 'http://' and 'https://'
# If no scheme specified,  default to 'https://'
swift_store_auth_address = <%= swift_store_auth_address %>

# User to authenticate against the Swift authentication service
# If you use Swift authentication service, set it to 'account':'user'
# where 'account' is a Swift storage account and 'user'
# is a user in that account
swift_store_user = <%= swift_store_user %>

# Auth key for the user authenticating against the
# Swift authentication service
swift_store_key = <%= swift_store_key %>

# Container within the account that the account should use
# for storing images in Swift
swift_store_container = <%= swift_store_container %>

# Do we create the container if it does not exist?
swift_store_create_container_on_put = <%= swift_store_create_container_on_put %>

# What size, in MB, should Glance start chunking image files
# and do a large object manifest in Swift? By default, this is
# the maximum object size in Swift, which is 5GB
swift_store_large_object_size = <%= swift_store_large_object_size %>

# When doing a large object manifest, what size, in MB, should
# Glance write chunks to Swift? This amount of data is written
# to a temporary disk buffer during the process of chunking
# the image file, and the default is 200MB
swift_store_large_object_chunk_size = <%= swift_store_large_object_chunk_size %>

# Whether to use ServiceNET to communicate with the Swift storage servers.
# (If you aren't RACKSPACE, leave this False!)
#
# To use ServiceNET for authentication, prefix hostname of
# `swift_store_auth_address` with 'snet-'.
# Ex. https://example.com/v1.0/ -> https://snet-example.com/v1.0/
swift_enable_snet = <%= swift_enable_snet %>

# If set to True enables multi-tenant storage mode which causes Glance images
# to be stored in tenant specific Swift accounts.
swift_store_multi_tenant = <%= swift_store_multi_tenant %>

# A list of tenants that will be granted read/write access on all Swift
# containers created by Glance in multi-tenant mode.
#swift_store_admin_tenants = <%= swift_store_admin_tenants %>

# ============ S3 Store Options =============================

# Address where the S3 authentication service lives
# Valid schemes are 'http://' and 'https://'
# If no scheme specified,  default to 'http://'
s3_store_host = <%= s3_store_host %>

# User to authenticate against the S3 authentication service
s3_store_access_key = <%= s3_store_access_key %>

# Auth key for the user authenticating against the
# S3 authentication service
s3_store_secret_key = <%= s3_store_secret_key %>

# Container within the account that the account should use
# for storing images in S3. Note that S3 has a flat namespace,
# so you need a unique bucket name for your glance images. An
# easy way to do this is append your AWS access key to "glance".
# S3 buckets in AWS *must* be lowercased, so remember to lowercase
# your AWS access key if you use it in your bucket name below!
s3_store_bucket = <%= s3_store_bucket %>

# Do we create the bucket if it does not exist?
s3_store_create_bucket_on_put = <%= s3_store_create_bucket_on_put %>

# When sending images to S3, the data will first be written to a
# temporary buffer on disk. By default the platform's temporary directory
# will be used. If required, an alternative directory can be specified here.
s3_store_object_buffer_dir = <%= s3_store_object_buffer_dir %>

# ============ RBD Store Options =============================

# Ceph configuration file path
# If using cephx authentication, this file should
# include a reference to the right keyring
# in a client.<USER> section
rbd_store_ceph_conf = <%= rbd_store_ceph_conf %>

# RADOS user to authenticate as (only applicable if using cephx)
rbd_store_user = <%= rbd_store_user %>

# RADOS pool in which images are stored
rbd_store_pool = <%= rbd_store_pool %>

# Images will be chunked into objects of this size (in megabytes).
# For best performance, this should be a power of two
rbd_store_chunk_size = <%= rbd_store_chunk_size %>

# ============ Delayed Delete Options =============================

# Turn on/off delayed delete
delayed_delete = <%= delayed_delete %>

# Delayed delete time in seconds
scrub_time = <%= scrub_time %>

# Directory that the scrubber will use to remind itself of what to delete
# Make sure this is also set in glance-scrubber.conf
scrubber_datadir = <%= scrubber_datadir %>

# =============== Image Cache Options =============================

# Base directory that the Image Cache uses
image_cache_dir = <%= image_cache_dir %>

[paste_deploy]
flavor = <%= api_flavor %>
